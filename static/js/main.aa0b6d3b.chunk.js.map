{"version":3,"sources":["shared/styles/theme/shared/sharedThemeOptions.ts","shared/styles/theme/modes/lightTheme.ts","shared/styles/theme/modes/darkTheme.ts","app/hooks.ts","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/counter/Counter.style.ts","features/counter/Counter.tsx","logo.svg","App.style.ts","app/store.ts","serviceWorker.ts","index.tsx","shared/styles/GlobalCSS/GlobalCSS.tsx","shared/styles/theme/useTheme.ts","App.tsx"],"names":["sharedThemeOptions","spacing","factor","components","MuiUseMediaQuery","defaultProps","noSsr","lightTheme","createTheme","defaultDarkTheme","palette","mode","darkTheme","useAppSelector","useSelector","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","counterReducer","reducer","actions","selectCount","counter","classes","root","row","button","options","isAsync","css","textBox","Counter","count","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","type","onClick","onChange","e","target","getState","header","logo","link","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","children","theme","useMediaQuery","useTheme","CssBaseline","ThemeProvider","src","alt","href","rel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa0b6d3b.chunk.js","sourcesContent":["import { ThemeOptions } from '@mui/material';\r\n\r\ndeclare module '@mui/material/styles' {}\r\n\r\nconst sharedThemeOptions: ThemeOptions = {\r\n  spacing: (factor: number) => `${factor}em`,\r\n  components: {\r\n    MuiUseMediaQuery: {\r\n      defaultProps: {\r\n        noSsr: true,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport { sharedThemeOptions };\r\n","import { createTheme } from '@mui/material';\r\n\r\nimport { sharedThemeOptions } from '../shared/sharedThemeOptions';\r\n\r\nconst lightTheme = createTheme(sharedThemeOptions, {});\r\n\r\nexport { lightTheme };\r\n","import { createTheme } from '@mui/material';\r\n\r\nimport { sharedThemeOptions } from '../shared/sharedThemeOptions';\r\n\r\nconst defaultDarkTheme = createTheme({ palette: { mode: 'dark' } });\r\n\r\nconst darkTheme = createTheme(defaultDarkTheme, sharedThemeOptions, {});\r\n\r\nexport { darkTheme };\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","// A mock function to mimic making an async request for data\nexport const fetchCount = (amount = 1) => {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 1000)\n  );\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport type { RootState, AppThunk } from '../../app/store';\r\nimport { fetchCount } from './counterAPI';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n  status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n/*\r\n * The function below is called a thunk and allows us to perform async logic. It\r\n * can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n * will call the thunk with the `dispatch` function as the first argument. Async\r\n * code can then be executed and other actions can be dispatched. Thunks are\r\n * typically used to make async requests.\r\n */\r\nconst incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount: number) => {\r\n    const response = await fetchCount(amount);\r\n\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      /*\r\n       * Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n       * doesn't actually mutate the state because it uses the Immer library,\r\n       * which detects changes to a \"draft state\" and produces a brand new\r\n       * immutable state based off those changes\r\n       */\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  /*\r\n   * The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n   * including actions generated by createAsyncThunk or in other slices.\r\n   */\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nconst counterReducer = counterSlice.reducer;\r\nconst { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n/*\r\n * The function below is called a selector and allows us to select a value from\r\n * the state. Selectors can also be defined inline where they're used instead of\r\n * in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\n */\r\nconst selectCount = (state: RootState) => state.counter.value;\r\n\r\n/*\r\n * We can also write thunks by hand, which may contain both sync and async logic.\r\n * Here's an example of conditionally dispatching actions based on current state.\r\n */\r\nconst makeIncrementIfOdd =\r\n  (amount: number): AppThunk =>\r\n  (dispatch, getState) => {\r\n    const currentValue = selectCount(getState());\r\n\r\n    if (currentValue % 2 === 1) {\r\n      dispatch(incrementByAmount(amount));\r\n    }\r\n  };\r\n\r\nexport type { CounterState };\r\n\r\nexport {\r\n  incrementAsync,\r\n  counterSlice,\r\n  counterReducer,\r\n  increment,\r\n  decrement,\r\n  incrementByAmount,\r\n  selectCount,\r\n  makeIncrementIfOdd,\r\n};\r\n","import { css } from '@emotion/react';\r\n\r\nconst classes = {\r\n  root: css`\r\n    display: flex;\r\n    flex-direction: column;\r\n  `,\r\n  row: css`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    &:not(:last-child) {\r\n      margin-bottom: 16px;\r\n    }\r\n  `,\r\n  button: (options: { isAsync?: boolean } = { isAsync: false }) => {\r\n    const isAsync =\r\n      options.isAsync &&\r\n      css`\r\n        position: relative;\r\n\r\n        &:after {\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          display: block;\r\n          width: 100%;\r\n          height: 100%;\r\n          background-color: rgb(112 76 182 / 0.15);\r\n          content: '';\r\n          opacity: 0;\r\n\r\n          @media screen and (prefers-reduced-motion: no-preference) {\r\n            transition: transform 1s linear, opacity 0.5s ease 1s;\r\n          }\r\n        }\r\n\r\n        &:active {\r\n          &:after {\r\n            opacity: 1;\r\n            transform: scaleX(0);\r\n\r\n            @media screen and (prefers-reduced-motion: no-preference) {\r\n              transition: transform 0s, opacity 0s;\r\n            }\r\n          }\r\n        }\r\n      `;\r\n\r\n    const button = css`\r\n      margin-right: 8px;\r\n      margin-left: 4px;\r\n      padding-right: 12px;\r\n      padding-bottom: 4px;\r\n      padding-left: 12px;\r\n      outline: none;\r\n      border: 2px solid transparent;\r\n      border-radius: 2px;\r\n      background: none;\r\n      background-color: rgb(112 76 182 / 0.1);\r\n      color: rgb(112 76 182);\r\n      font-size: 32px;\r\n      transition: border-color 0.15s, background-color 0.15s;\r\n      appearance: none;\r\n\r\n      &:hover,\r\n      &:focus {\r\n        border-color: rgb(112 76 182 / 0.4);\r\n      }\r\n      &:active {\r\n        background-color: rgb(112 76 182 / 0.2);\r\n      }\r\n\r\n      ${isAsync}\r\n    `;\r\n\r\n    return button;\r\n  },\r\n  value: css`\r\n    margin-top: 2px;\r\n    padding-right: 16px;\r\n    padding-left: 16px;\r\n    font-size: 78px;\r\n    font-family: 'Courier New', Courier, monospace;\r\n  `,\r\n  textBox: css`\r\n    margin-right: 4px;\r\n    padding: 2px;\r\n    width: 64px;\r\n    text-align: center;\r\n    font-size: 32px;\r\n  `,\r\n};\r\n\r\nexport { classes };\r\n","import React, { useState } from 'react';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  makeIncrementIfOdd,\r\n  selectCount,\r\n} from './counterSlice';\r\nimport { classes } from './Counter.style';\r\n\r\ninterface CounterProps {}\r\n\r\nconst Counter: React.FC<CounterProps> = () => {\r\n  const count = useAppSelector(selectCount);\r\n  const dispatch = useAppDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  const incrementValue = Number(incrementAmount) || 0;\r\n\r\n  return (\r\n    <div css={classes.root}>\r\n      <div css={classes.row}>\r\n        <button\r\n          type=\"button\"\r\n          css={classes.button()}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n        <span css={classes.value}>{count}</span>\r\n        <button\r\n          type=\"button\"\r\n          css={classes.button()}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n      <div css={classes.row}>\r\n        <input\r\n          css={classes.textBox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={(e) => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          css={classes.button()}\r\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          css={classes.button({ isAsync: true })}\r\n          onClick={() => dispatch(incrementAsync(incrementValue))}\r\n        >\r\n          Add Async\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          css={classes.button()}\r\n          onClick={() => dispatch(makeIncrementIfOdd(incrementValue))}\r\n        >\r\n          Add If Odd\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type { CounterProps };\r\n\r\nexport { Counter };\r\n","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import { css } from '@emotion/react';\r\n\r\nconst classes = {\r\n  root: css`\r\n    text-align: center;\r\n  `,\r\n  header: css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-height: 100vh;\r\n    font-size: calc(10px + 2vmin);\r\n  `,\r\n  logo: css`\r\n    height: 40vmin;\r\n    pointer-events: none;\r\n\r\n    @keyframes logo-float {\r\n      0% {\r\n        transform: translateY(0);\r\n      }\r\n      50% {\r\n        transform: translateY(10px);\r\n      }\r\n      100% {\r\n        transform: translateY(0);\r\n      }\r\n    }\r\n\r\n    @media (prefers-reduced-motion: no-preference) {\r\n      animation: logo-float infinite 3s ease-in-out;\r\n    }\r\n  `,\r\n  link: css`\r\n    color: rgb(112 76 182);\r\n  `,\r\n};\r\n\r\nexport { classes };\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\n\r\nimport { counterReducer } from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","/* eslint-disable */\r\n/*\r\n * This optional code is used to register a service worker.\r\n * register() is not called by default.\r\n */\r\n\r\n/*\r\n * This lets the app load faster on subsequent visits in production, and gives\r\n * it offline capabilities. However, it also means that developers (and users)\r\n * will only see deployed updates on subsequent visits to a page, after all the\r\n * existing tabs open on the page have been closed, since previously cached\r\n * resources are updated in the background.\r\n */\r\n\r\n/*\r\n * To learn more about the benefits of this model and instructions on how to\r\n * opt-in, read https://bit.ly/CRA-PWA\r\n */\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      /*\r\n       * Our service worker won't work if PUBLIC_URL is on a different origin\r\n       * from what our page is served on. This might happen if a CDN is used to\r\n       * serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n       */\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        /*\r\n         * Add some additional logging to localhost, pointing developers to the\r\n         * service worker/PWA documentation.\r\n         */\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              /*\r\n               * At this point, the updated precached content has been fetched,\r\n               * but the previous service worker will still serve the older\r\n               * content until all client tabs are closed.\r\n               */\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              /*\r\n               * At this point, everything has been precached.\r\n               * It's the perfect time to display a\r\n               * \"Content is cached for offline use.\" message.\r\n               */\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { GlobalCSS } from '@shared/styles/GlobalCSS/GlobalCSS';\r\n\r\nimport { App } from './App';\r\nimport { store } from './app/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <GlobalCSS>\r\n        <App />\r\n      </GlobalCSS>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n/*\r\n * If you want your app to work offline and load faster, you can change\r\n * unregister() to register() below. Note this comes with some pitfalls.\r\n * Learn more about service workers: https://bit.ly/CRA-PWA\r\n */\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { CssBaseline, ThemeProvider } from '@mui/material';\r\n\r\nimport { useTheme } from '../theme/useTheme';\r\nimport './GlobalCSS.css';\r\n\r\ninterface GlobalCSSProps {}\r\n\r\nconst GlobalCSS: React.FC<GlobalCSSProps> = ({ children }) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { GlobalCSS };\r\n","import { useMediaQuery } from '@mui/material';\r\n\r\nimport { lightTheme } from './modes/lightTheme';\r\nimport { darkTheme } from './modes/darkTheme';\r\n\r\nconst useTheme = ({ noSsr = true } = {}) => {\r\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\r\n    noSsr,\r\n  });\r\n\r\n  return prefersDarkMode ? darkTheme : lightTheme;\r\n};\r\n\r\nexport { useTheme };\r\n","import React from 'react';\r\n\r\nimport { Counter } from './features/counter/Counter';\r\nimport logo from './logo.svg';\r\nimport { classes } from './App.style';\r\n\r\ninterface AppProps {}\r\n\r\nconst App: React.FC<AppProps> = () => {\r\n  return (\r\n    <div css={classes.root}>\r\n      <header css={classes.header}>\r\n        <img src={logo} css={classes.logo} alt=\"logo\" />\r\n        <Counter />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <span>\r\n          <span>Learn </span>\r\n          <a\r\n            css={classes.link}\r\n            href=\"https://reactjs.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            css={classes.link}\r\n            href=\"https://redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            css={classes.link}\r\n            href=\"https://redux-toolkit.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux Toolkit\r\n          </a>\r\n          ,<span> and </span>\r\n          <a\r\n            css={classes.link}\r\n            href=\"https://react-redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React Redux\r\n          </a>\r\n        </span>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type { AppProps };\r\n\r\nexport { App };\r\n"],"sourceRoot":""}